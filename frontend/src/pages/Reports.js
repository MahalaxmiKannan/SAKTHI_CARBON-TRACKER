import React, { useState, useEffect } from 'react';
import api from '../api';
import useAuth from '../hooks/useAuth';
import { format } from 'date-fns';
import { Box, Paper, Typography, Button, Select, MenuItem, FormControl, InputLabel, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Link } from '@mui/material';

const Reports = () => {
    const [reports, setReports] = useState([]);
    const [reportType, setReportType] = useState('Monthly');
    const [formatType, setFormatType] = useState('pdf');
    const [loading, setLoading] = useState(false);
    const { user } = useAuth();

    useEffect(() => {
        const fetchReports = async () => {
            const { data } = await api.get('/reports');
            setReports(data);
        };
        fetchReports();
    }, []);

    const handleGenerate = async () => {
        setLoading(true);
        try {
            const { data: newReport } = await api.post('/reports/generate', { reportType, format: formatType });
            setReports([newReport, ...reports]);
        } catch (error) { alert('Failed to generate report. Only Admins can perform this action.'); }
        setLoading(false);
    };

    return (
        <Box>
            <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold' }}>Reports</Typography>
            {user?.role === 'Admin' && (
                <Paper elevation={2} sx={{ p: 3, mb: 4 }}>
                    <Typography variant="h6" gutterBottom>Generate New Report</Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <FormControl><InputLabel>Type</InputLabel><Select value={reportType} label="Type" onChange={(e) => setReportType(e.target.value)}><MenuItem value="Monthly">Monthly</MenuItem><MenuItem value="Quarterly">Quarterly</MenuItem><MenuItem value="Annual">Annual</MenuItem></Select></FormControl>
                        <FormControl><InputLabel>Format</InputLabel><Select value={formatType} label="Format" onChange={(e) => setFormatType(e.target.value)}><MenuItem value="pdf">PDF</MenuItem><MenuItem value="xlsx">Excel</MenuItem></Select></FormControl>
                        <Button variant="contained" onClick={handleGenerate} disabled={loading}>{loading ? 'Generating...' : 'Generate'}</Button>
                    </Box>
                </Paper>
            )}
            <Paper elevation={2} sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom>Generated Reports</Typography>
                <TableContainer><Table><TableHead><TableRow sx={{ '& th': { fontWeight: 'bold' } }}><TableCell>File Name</TableCell><TableCell>Generated By</TableCell><TableCell>Date</TableCell><TableCell>Download</TableCell></TableRow></TableHead>
                    <TableBody>{reports.map(report => (<TableRow key={report._id} hover><TableCell>{report.fileName}</TableCell><TableCell>{report.generatedBy}</TableCell><TableCell>{format(new Date(report.createdAt), 'dd MMM yyyy, HH:mm')}</TableCell><TableCell><Link href={`http://localhost:5000${report.fileUrl}`} target="_blank" rel="noopener noreferrer">Download</Link></TableCell></TableRow>))}</TableBody>
                </Table></TableContainer>
            </Paper>
        </Box>
    );
};

export default Reports;